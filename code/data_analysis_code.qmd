---
title: "Project Part 3"
subtitle: "Data analysis code"
author: Erick E. Mollinedo
date: '`r format(Sys.Date(), "%B %d, %Y")`'
format: html
editor: visual
---

## Data Analysis

List of packages needed for the whole data processing and data analysis

```{r}
library(here)
library(readxl)
library(tidyverse)
library(corrplot)
library(RColorBrewer)
library(ggpubr)
library(rstatix)
library(tidymodels)
```

Open the `concentration` and `hapin_samples` .RDS files to conduct the analyses.

```{r}
concentration <- read_rds(here("data", "processed-data", "concentration.rds"))
hapin_filters <- read_rds(here("data", "processed-data", "hapin_samples.rds"))
```

To answer question 1, I will plot the correlations in a correlation plot using the `corrplot()` function. I used the previous code, since it was already developed, but editing to add more detail to the plot.

```{r}
#First, delete unnecessary variables to conduct the correlation test
cor <- concentration %>% select(-c(filter_id, fueltype, arm))

#Perform the spearman correlation test
cor <- stats::cor(cor, method = "pearson")

#Create the correlation plot
corrplot(cor, method = "color", type = "lower", #Color form and displays at the lower portion
         col = COL2("RdYlBu", 20), order = "hclust", #Color palette, and order or the species
         tl.col = "orangered4", tl.srt = 0, tl.cex = 1,  #Color of the axis, position and size
         addCoef.col = "gray10", number.font = 2, number.cex = 0.8, #Display correlation number, set the font and size
         col.lim = c(0, 1), is.corr = T) #Set the color limits at the bar
```

To answer question 2, I will conduct a T-test using the `tidymodels` package

```{r}
# Conduct T-tests for the chemical species based on 'fueltype'
results <- map_dfr(2:12, function(i) { #To select columns that contain the variables to analyze
  variable <- names(concentration)[i] #The dataframe where the name of the variables are
  t_test <- t.test(reformulate('fueltype', response = variable), data = concentration) #Select the fueltype variable
  
  tibble( #Format the tibble
    variable = variable,
    statistic = t_test$statistic,
    p_value = t_test$p.value,
    estimate = t_test$estimate,
    null_value = t_test$null.value,
    alternative = t_test$alternative,
    method = t_test$method,
    conf_low = t_test$conf.int[1],
    conf_high = t_test$conf.int[2]
  )
})

results #Print the results as a tibble
```

To answer question 3, I will conduct a regression analysis. But first I will merge the data from `hapin_filters` with the `concentration` data. Modeling can be difficult if there are missing values, so I will additionally clean the `hapin_merged` df, so it removes all NAs.

```{r}
#remove the 'arm' and 'fueltype' variables from the 'concentration' df
conc2 <- concentration %>% select(-c(arm, fueltype))

#Use 'inner_join()' to merge dataframes
hapin_merged <- inner_join(conc2, hapin_filters, by= "filter_id")

#Remove pm25, bc and co, and additionally drop all NAs
hapin_merged <- hapin_merged %>%
  select(-c(pm25, bc, co)) %>%
  drop_na()

#Save new df as a .RDS file
saveRDS(hapin_merged, file = here("data", "processed-data", "hapin-final.rds"))
```

Now conducting the model selection using the `tidymodels` package. For the models, I used the gamma distribution family, since the concentrations of each chemical species could be explained by the gamma distribution. I used all the recorded exposures except incence and generator, since these had low variability in the answers.

```{r}
# Create a generalized linear regression model specification using gamma distribution (This will be used for all the models)
gamma_spec <- linear_reg(mode = "regression") %>%
  set_engine("glm", family = Gamma(link = "log"))

###########To predict the Al variable##############
# Create the recipe for preprocessing
recipeAl <- recipe(Al ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitAl <- workflow() %>%
  add_recipe(recipeAl) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsAl <- fitAl %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsAl)

###########To predict the BC variable##############
# Create the recipe for preprocessing
recipeBC <- recipe(BC ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitBC <- workflow() %>%
  add_recipe(recipeBC) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsBC <- fitBC %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsBC)

###########To predict the Ca variable##############
# Create the recipe for preprocessing
recipeCa <- recipe(Ca ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitCa <- workflow() %>%
  add_recipe(recipeCa) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsCa <- fitCa %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsCa)

###########To predict the Fe variable##############
# Create the recipe for preprocessing
recipeFe <- recipe(Fe ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitFe <- workflow() %>%
  add_recipe(recipeFe) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsFe <- fitFe %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsFe)

###########To predict the K variable##############
# Create the recipe for preprocessing
recipeK <- recipe(K ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitK <- workflow() %>%
  add_recipe(recipeK) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsK <- fitK %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsK)

###########To predict the Mg variable##############
# Create the recipe for preprocessing
recipeMg <- recipe(Mg ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMg <- workflow() %>%
  add_recipe(recipeMg) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMg <- fitMg %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMg)

###########To predict the Mn variable##############
# Create the recipe for preprocessing
recipeMn <- recipe(Mn ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMn <- workflow() %>%
  add_recipe(recipeMn) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMn <- fitMn %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMn)

###########To predict the S variable##############
# Create the recipe for preprocessing
recipeSul <- recipe(S ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSul <- workflow() %>%
  add_recipe(recipeSul) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSul <- fitSul %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSul)

###########To predict the Si variable##############
# Create the recipe for preprocessing
recipeSi <- recipe(Si ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSi <- workflow() %>%
  add_recipe(recipeSi) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSi <- fitSi %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSi)

###########To predict the Ti variable##############
# Create the recipe for preprocessing
recipeTi <- recipe(Ti ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitTi <- workflow() %>%
  add_recipe(recipeTi) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsTi <- fitTi %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsTi)

###########To predict the Zn variable##############
# Create the recipe for preprocessing
recipeZn <- recipe(Zn ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitZn <- workflow() %>%
  add_recipe(recipeZn) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsZn <- fitZn %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsZn)
```

Based on the previous models, it seems like the most important variables are `fueltype` (as expected), `kerosene`, `stove_other` and `smoke` depending on the chemical species. I was worried of the low variability on responses for some of the variables so I am going to use only the variables `micro_exposures`, `macro_exposures`, `kerosene`, `stove_other` and `fueltype`.

```{r}
###########To predict the Al variable##############
# Create the recipe for preprocessing
recipeAl2 <- recipe(Al ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitAl2 <- workflow() %>%
  add_recipe(recipeAl2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsAl2 <- fitAl2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsAl2)

###########To predict the BC variable##############
# Create the recipe for preprocessing
recipeBC2 <- recipe(BC ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitBC2 <- workflow() %>%
  add_recipe(recipeBC2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsBC2 <- fitBC2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsBC2)

###########To predict the Ca variable##############
# Create the recipe for preprocessing
recipeCa2 <- recipe(Ca ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitCa2 <- workflow() %>%
  add_recipe(recipeCa2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsCa2 <- fitCa2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsCa2)

###########To predict the Fe variable##############
# Create the recipe for preprocessing
recipeFe2 <- recipe(Fe ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitFe2 <- workflow() %>%
  add_recipe(recipeFe2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsFe2 <- fitFe2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsFe2)

###########To predict the K variable##############
# Create the recipe for preprocessing
recipeK2 <- recipe(K ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitK2 <- workflow() %>%
  add_recipe(recipeK2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsK2 <- fitK2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsK2)

###########To predict the Mg variable##############
# Create the recipe for preprocessing
recipeMg2 <- recipe(Mg ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMg2 <- workflow() %>%
  add_recipe(recipeMg2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMg2 <- fitMg2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMg2)

###########To predict the Mn variable##############
# Create the recipe for preprocessing
recipeMn2 <- recipe(Mn ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMn2 <- workflow() %>%
  add_recipe(recipeMn2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMn2 <- fitMn2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMn2)

###########To predict the S variable##############
# Create the recipe for preprocessing
recipeSul2 <- recipe(S ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSul2 <- workflow() %>%
  add_recipe(recipeSul2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSul2 <- fitSul2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSul2)

###########To predict the Si variable##############
# Create the recipe for preprocessing
recipeSi2 <- recipe(Si ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSi2 <- workflow() %>%
  add_recipe(recipeSi2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSi2 <- fitSi2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSi2)

###########To predict the Ti variable##############
# Create the recipe for preprocessing
recipeTi2 <- recipe(Ti ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitTi2 <- workflow() %>%
  add_recipe(recipeTi2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsTi2 <- fitTi2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsTi2)

###########To predict the Zn variable##############
# Create the recipe for preprocessing
recipeZn2 <- recipe(Zn ~ micro_exposures + macro_exposures + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitZn2 <- workflow() %>%
  add_recipe(recipeZn2) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsZn2 <- fitZn2 %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsZn2)
```

Using this approach it seems like only `fueltype` and `other_stove` are almost all of the variables important to make predictions of the chemical species.

And now evaluating both models for all the species. First I will set the resampling method using cross-validation.

```{r}
#Set the seed for reproducibility
set.seed(1234)

# Set up resampling method with 10 folds cross-validation
samples <- vfold_cv(hapin_merged, v = 10)
```

And now evaluating both models of `Al` using the RMSE and R-squared values for both models. The same process will be described below for the other chemical species.

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Al_evaluation <- workflow() %>%
  add_recipe(recipeAl) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Al_metrics <- Al_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Al2_evaluation <- workflow() %>%
  add_recipe(recipeAl2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Al2_metrics <- Al2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Al_metrics)
print(Al2_metrics)
```

Now for BC...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
BC_evaluation <- workflow() %>%
  add_recipe(recipeBC) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
BC_metrics <- BC_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
BC2_evaluation <- workflow() %>%
  add_recipe(recipeBC2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
BC2_metrics <- BC2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(BC_metrics)
print(BC2_metrics)
```

Now for Ca...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Ca_evaluation <- workflow() %>%
  add_recipe(recipeCa) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Ca_metrics <- Ca_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Ca2_evaluation <- workflow() %>%
  add_recipe(recipeCa2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Ca2_metrics <- Ca2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Ca_metrics)
print(Ca2_metrics)
```

Now for Fe...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Fe_evaluation <- workflow() %>%
  add_recipe(recipeFe) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Fe_metrics <- Fe_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Fe2_evaluation <- workflow() %>%
  add_recipe(recipeFe2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Fe2_metrics <- Fe2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Fe_metrics)
print(Fe2_metrics)
```

Now for K...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
K_evaluation <- workflow() %>%
  add_recipe(recipeK) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
K_metrics <- K_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
K2_evaluation <- workflow() %>%
  add_recipe(recipeK2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
K2_metrics <- K2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(K_metrics)
print(K2_metrics)
```

Now for Mg...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Mg_evaluation <- workflow() %>%
  add_recipe(recipeMg) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Mg_metrics <- Mg_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Mg2_evaluation <- workflow() %>%
  add_recipe(recipeMg2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Mg2_metrics <- Mg2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Mg_metrics)
print(Mg2_metrics)
```

Now for Mn...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Mn_evaluation <- workflow() %>%
  add_recipe(recipeMn) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Mn_metrics <- Mn_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Mn2_evaluation <- workflow() %>%
  add_recipe(recipeMn2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Mn2_metrics <- Mn2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Mn_metrics)
print(Mn2_metrics)
```

Now for S...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Sul_evaluation <- workflow() %>%
  add_recipe(recipeSul) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Sul_metrics <- Sul_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Sul2_evaluation <- workflow() %>%
  add_recipe(recipeSul2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Sul2_metrics <- Sul2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Sul_metrics)
print(Sul2_metrics)
```

Now for Si...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Si_evaluation <- workflow() %>%
  add_recipe(recipeSi) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Si_metrics <- Si_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Si2_evaluation <- workflow() %>%
  add_recipe(recipeSi2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Si2_metrics <- Si2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Si_metrics)
print(Si2_metrics)
```

Now for Ti...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Ti_evaluation <- workflow() %>%
  add_recipe(recipeTi) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Ti_metrics <- Ti_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Ti2_evaluation <- workflow() %>%
  add_recipe(recipeTi2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Ti2_metrics <- Ti2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Ti_metrics)
print(Ti2_metrics)
```

Now for Zn...

```{r}
###### MODEL 1 #######
# Fit the model using cross-validation
Zn_evaluation <- workflow() %>%
  add_recipe(recipeZn) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Zn_metrics <- Zn_evaluation %>%
  collect_metrics()

###### MODEL 2 ######
# Fit the model using cross-validation
Zn2_evaluation <- workflow() %>%
  add_recipe(recipeZn2) %>%
  add_model(gamma_spec) %>%
  fit_resamples(resamples = samples)

# Extract the results of the model
Zn2_metrics <- Zn2_evaluation %>%
  collect_metrics()

#Print the RMSE and R-square for both models
print(Zn_metrics)
print(Zn2_metrics)
```

For all of the models it seems like the model with all the predictors works best, instead of grouping the predcitors (exposures) in further categories. However, the R-square and RMSE values are really low, so maybe a different approach for modeling is required.

I will do an attempt to save all the RMSE an R-squared values in one table:

```{r}
#Bind dfs that contain all RMSEs and R-squares from all models
metrics_final <- bind_rows(Al_metrics, Al2_metrics, BC_metrics, BC2_metrics, Ca_metrics, Ca2_metrics, Fe_metrics, Fe2_metrics,
                           K_metrics, K2_metrics, Mg_metrics, Mg2_metrics, Mn_metrics, Mn2_metrics, Si_metrics, Si2_metrics,
                           Sul_metrics, Sul2_metrics, Ti_metrics, Ti2_metrics, Zn_metrics, Zn2_metrics)

#Create a vector to name all chemical species
species <- rep(c("Al", "BC", "Ca", "Fe", "K", "Mg", "Mn", "Si", "S", "Ti", "Zn"), each = 4)

# Adding the 'chemical_species' variable to 'metrics_final'
metrics_final$Species <- species

# Creating a vector of observation types
obs <- rep(c(rep("N1", 2), rep("N2", 2)), length.out = 44)

# Adding the 'obs' variable to 'metrics_final'
metrics_final$obs <- obs

#Finally, delete non-necessary columns
metrics_final <- metrics_final %>% select(-c(.estimator, n, std_err, .config))
```

Do additional adjustments to the metrics table, and then save it as an .RDS file.

```{r}
#Change dataframe from long to wide
metrics_wide <- metrics_final %>% pivot_wider(names_from = obs, values_from = mean)

#Rename columns, rearrange them and edit values for some columns
metrics_wide <- metrics_wide %>% rename(Metric = ".metric", Model1 = "N1", Model2 = "N2") %>%
  select(c(Species, Metric, Model1, Model2))

#Save df as .RDS file
saveRDS(metrics_wide, file = here("results", "tables", "model_metrics.rds"))
```
