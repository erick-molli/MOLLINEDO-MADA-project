---
title: "Supplementary Material"
subtitle: "Project: Part 4"
author: Erick E. Mollinedo
date: '`r format(Sys.Date(), "%B %d, %Y")`'
format:
  docx:
    toc: false
    number-sections: true
    highlight-style: github
---

```{r include=FALSE}
library(tidyverse)
library(tidymodels)
library(here)
library(readr)
library(gt)
```

# Supplementary Material

The following document includes some of the results from the exploratory data analysis.


## Supplementary Results

@fig-conc shows the summary of concentrations for each chemical species categorized by study arm. It is observed a similar pattern observed from the categorization by type of fuel, where Mg, Mn, Ca, K, BC, Ti, Si and S have statistically significant differences in concentrations (shown as ****).

![Chemical species concentrations by study arm](../../../results/figures/boxplot-arm.jpg){#fig-conc}

In terms of the categorical exposures @fig-cat summarizes the responses from all the exposures. It is observed that for the incence and generator variables there were just a few or none observations that recorded being exposed to these sources. Meanwhile, stove usage was the exposure most recorded.

![Summary of categorical exposures](../../../results/figures/cat-exposures.jpg){#fig-cat}

The following figures show the distribution of the concentrations of Carbon monoxide (@fig-co) and PM~2.5~ (@fig-pm), which were considered as covariates (CO) or independent variables (PM~2.5~) to be included in the modelling process with the categorical exposures.

![Carbon Monoxide concentrations by type of fuel](../../../results/figures/co.jpg){#fig-co}

![PM2.5 concentrations by type of fuel](../../../results/figures/pm25.jpg){#fig-pm}

The following tables show the results when conducting the generalized linear models using a single or multiple variables for the chemical species that can be interpreted by sources of exposure.

```{r echo=FALSE}
#Open the hapin_merged df

hapin_merged <- read_rds(here("data", "processed-data", "hapin-final.rds"))

# Create a generalized linear regression model specification using gamma distribution (This will be used for all the models)
gamma_spec <- linear_reg(mode = "regression") %>%
  set_engine("glm", family = Gamma(link = "log"))

###########To predict the Al variable##############
# Create the recipe for preprocessing
recipeAl <- recipe(Al ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitAl <- workflow() %>%
  add_recipe(recipeAl) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsAl <- fitAl %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsAl)

###########To predict the BC variable##############
# Create the recipe for preprocessing
recipeBC <- recipe(BC ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitBC <- workflow() %>%
  add_recipe(recipeBC) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsBC <- fitBC %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsBC)

###########To predict the Ca variable##############
# Create the recipe for preprocessing
recipeCa <- recipe(Ca ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitCa <- workflow() %>%
  add_recipe(recipeCa) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsCa <- fitCa %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsCa)

###########To predict the Fe variable##############
# Create the recipe for preprocessing
recipeFe <- recipe(Fe ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitFe <- workflow() %>%
  add_recipe(recipeFe) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsFe <- fitFe %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsFe)

###########To predict the K variable##############
# Create the recipe for preprocessing
recipeK <- recipe(K ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitK <- workflow() %>%
  add_recipe(recipeK) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsK <- fitK %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsK)

###########To predict the Mg variable##############
# Create the recipe for preprocessing
recipeMg <- recipe(Mg ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMg <- workflow() %>%
  add_recipe(recipeMg) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMg <- fitMg %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMg)

###########To predict the Mn variable##############
# Create the recipe for preprocessing
recipeMn <- recipe(Mn ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitMn <- workflow() %>%
  add_recipe(recipeMn) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsMn <- fitMn %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsMn)

###########To predict the S variable##############
# Create the recipe for preprocessing
recipeSul <- recipe(S ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSul <- workflow() %>%
  add_recipe(recipeSul) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSul <- fitSul %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSul)

###########To predict the Si variable##############
# Create the recipe for preprocessing
recipeSi <- recipe(Si ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitSi <- workflow() %>%
  add_recipe(recipeSi) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsSi <- fitSi %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsSi)

###########To predict the Ti variable##############
# Create the recipe for preprocessing
recipeTi <- recipe(Ti ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitTi <- workflow() %>%
  add_recipe(recipeTi) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsTi <- fitTi %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsTi)

###########To predict the Zn variable##############
# Create the recipe for preprocessing
recipeZn <- recipe(Zn ~ stove + smoke + coil + trash + kerosene + smoky + crop + stove_other + fueltype, data = hapin_merged) %>%
  step_dummy(all_nominal(), -all_outcomes())

#Fit the model
fitZn <- workflow() %>%
  add_recipe(recipeZn) %>%
  add_model(gamma_spec) %>%
  fit(data = hapin_merged)

# Extract and print the results of the model
resultsZn <- fitZn %>%
  pull_workflow_fit() %>%
  tidy()

print(resultsZn)
```

The following table shows the values used to judge models (RMSE and R-square) for all chemical species between Model 1 and Model 2.

```{r echo=FALSE}
#Load the metrics table
suptable <- read_rds(here("results", "tables", "model_metrics.rds"))

#Show the table
suptable %>% gt()
```

